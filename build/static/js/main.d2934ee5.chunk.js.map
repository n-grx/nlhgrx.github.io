{"version":3,"sources":["js/controller.js","components/dropdown.jsx","components/dropdownitem.jsx","components/task.jsx","components/projectdropdown.jsx","components/newTaskModule.jsx","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","value","project","id","edit","console","log","changeProject","delete","complete","this","Date","Dropdown","handleClick","bind","handleOutsideClick","state","popupVisible","document","removeEventListener","addEventListener","setState","prevState","e","node","contains","target","className","ref","onClick","props","btnInvisible","icon","children","Component","DropdownItem","triggerAction","Task","onHandleEdit","editMode","handleKeyPress","event","key","onUpdateTask","taskInputValue","handleDelete","onDelete","handleOnCompleteTask","isComplete","setTimeout","onCompleteTask","calculateTaskAge","dateCreated","created","today","age","Math","floor","handleProjectSelection","onUpdateProject","evt","Fragment","type","placeholder","onKeyPress","onChange","updateTaskInputValue","projects","ProjectDropdown","projectSelectorValue","onProjectSelection","onTextChange","suggestions","hasNewProject","length","items","regex","RegExp","sort","filter","v","test","name","push","renderSuggestions","map","item","idx","NewTaskModule","preventDefault","createTask","handleCreateTask","onCreateTask","handleProjectReorder","projectList","onReorderProjects","Modal","handleHideModal","hide","showHideClassName","show","heading","boob","require","App","myHeaders","Headers","Accept","updateLocalStorage","obj","window","localStorage","setItem","JSON","stringify","date","calculateProjectScore","task","projectScore","projectCount","find","parseInt","calculateTaskScore","orderData","tasks","rawData","Object","keys","totalScore","score","newData","a","b","pop","concat","apply","fetchData","x","parse","getItem","y","rootTasks","reorderProjects","object","taskProject","timeStamp","now","ids","updateTaskValue","taskIDX","taskValue","updateTaskProject","deleteTask","taskId","deleteProject","projectIDX","currentTarget","projectIndex","forEach","completeTask","restoretestData","onDragStart","index","draggedItem","dataTransfer","effectAllowed","setData","parentNode","setDragImage","onDragOver","draggedOverItem","splice","onDragEnd","draggedIdx","showModal","modals","dataset","modal","visible","hideModal","pageTitle","newTask","navigation","priority","offline","nick","renderTask","allProjects","data-modal","to","draggable","path","filteredTasks","renderProjectView","mit","shift","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2934ee5.chunk.js","sourcesContent":["const storageType = 0; // 0 = local, 1 = server;\r\n\r\nswitch (true) {\r\n  case 'value1':\r\n    break;\r\n  case 'value2':\r\n    break;\r\n  case 'valueN':\r\n    break;\r\n  default:\r\n    break;\r\n}\r\n\r\n// updateLocalStorage = (name, obj) => {\r\n//   window.localStorage.setItem(name, JSON.stringify(obj));\r\n// };\r\n\r\nclass boob {\r\n  constructor(value, project, id) {\r\n    this.value = value;\r\n    this.id = id ? id : 'id_' + +new Date();\r\n  }\r\n\r\n  edit = () => {\r\n    console.log('Task deleted.');\r\n  };\r\n\r\n  changeProject = () => {\r\n    console.log('Task deleted.');\r\n  };\r\n\r\n  delete = () => {\r\n    console.log('Task deleted.');\r\n  };\r\n\r\n  complete = () => {\r\n    console.log('Task deleted.');\r\n  };\r\n}\r\n\r\nmodule.exports = boob;\r\n","import React, { Component } from 'react';\r\n\r\nclass Dropdown extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n\r\n    this.state = {\r\n      popupVisible: false\r\n    };\r\n  }\r\n\r\n  handleClick() {\r\n    if (!this.state.popupVisible) {\r\n      // attach/remove event handler\r\n      document.addEventListener('click', this.handleOutsideClick, false);\r\n    } else {\r\n      document.removeEventListener('click', this.handleOutsideClick, false);\r\n    }\r\n\r\n    this.setState(prevState => ({\r\n      popupVisible: !prevState.popupVisible\r\n    }));\r\n  }\r\n\r\n  handleOutsideClick(e) {\r\n    // ignore clicks on the component itself\r\n    if (this.node.contains(e.target)) {\r\n      return;\r\n    }\r\n\r\n    this.handleClick();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('click', this.handleOutsideClick, false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"popover-container\"\r\n        ref={node => {\r\n          this.node = node;\r\n        }}>\r\n        <button\r\n          onClick={this.handleClick}\r\n          className={\r\n            this.props.btnInvisible\r\n              ? 'btn btn-icon btn-invisible'\r\n              : 'btn btn-icon'\r\n          }>\r\n          <i className=\"material-icons\">{this.props.icon}</i>\r\n        </button>\r\n        {this.state.popupVisible && (\r\n          <div className=\"menu-container noselect pull-right\">\r\n            <div className=\"menu\">\r\n              <div className=\"menu-list\">{this.props.children}</div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { Component } from 'react';\r\n\r\nclass DropdownItem extends Component {\r\n  render() {\r\n    const handleOnClick = () => {\r\n      this.props.triggerAction();\r\n    };\r\n\r\n    return (\r\n      <div className=\"menu-item-container\">\r\n        <div className=\"menu-item\" onClick={handleOnClick}>\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DropdownItem;\r\n","import React, { Component } from 'react';\r\nimport Dropdown from './dropdown';\r\nimport DropdownItem from './dropdownitem';\r\n\r\nclass Task extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n\r\n    this.state = {\r\n      editMode: false,\r\n      taskInputValue: this.props.children,\r\n      isComplete: false\r\n    };\r\n  }\r\n\r\n  handleClick() {\r\n    if (!this.state.editMode) {\r\n      // attach/remove event handler\r\n      document.addEventListener('click', this.handleOutsideClick, false);\r\n    } else {\r\n      document.removeEventListener('click', this.handleOutsideClick, false);\r\n    }\r\n\r\n    if (this.state.editMode) {\r\n      this.props.onUpdateTask(this.props.id, this.state.taskInputValue);\r\n    }\r\n\r\n    this.setState(prevState => ({\r\n      editMode: !prevState.editMode\r\n    }));\r\n  }\r\n\r\n  handleOutsideClick(e) {\r\n    // ignore clicks on the component itself\r\n    if (this.node.contains(e.target)) {\r\n      return;\r\n    }\r\n\r\n    this.handleClick();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('click', this.handleOutsideClick, false);\r\n  }\r\n\r\n  onHandleEdit = () => {\r\n    this.setState({ editMode: true });\r\n  };\r\n\r\n  updateTaskInputValue(evt) {\r\n    this.setState({\r\n      taskInputValue: evt.target.value\r\n    });\r\n  }\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === 'Enter') {\r\n      this.props.onUpdateTask(this.props.id, this.state.taskInputValue);\r\n      this.setState({ editMode: false });\r\n    }\r\n  };\r\n\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.id);\r\n  };\r\n\r\n  handleOnCompleteTask = () => {\r\n    this.setState({ isComplete: true });\r\n    setTimeout(() => {\r\n      this.props.onCompleteTask(this.props.id);\r\n    }, 600);\r\n  };\r\n\r\n  calculateTaskAge = dateCreated => {\r\n    const created = new Date(dateCreated);\r\n    const today = new Date();\r\n    let age = Math.floor((today - created) / (1000 * 60 * 60 * 24));\r\n    if (age < 2) {\r\n      return 'Today';\r\n    } else if (age / 7 >= 1) {\r\n      return Math.floor(age / 7) + 'w ago';\r\n    } else {\r\n      return (age % 7) + 'd ago';\r\n    }\r\n  };\r\n\r\n  handleProjectSelection = project => {\r\n    this.props.onUpdateProject(this.props.id, project);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"task-item mb-1\">\r\n          <div className=\"task-details\">\r\n            <div className=\"checker\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-radio mr-3 \"\r\n                id=\"check-one\"\r\n                onClick={this.handleOnCompleteTask}></input>\r\n            </div>\r\n            <div\r\n              ref={node => {\r\n                this.node = node;\r\n              }}\r\n              className={`task-content ${\r\n                this.state.isComplete ? 'strikethrough' : ''\r\n              }`}>\r\n              {this.state.editMode ? (\r\n                <input\r\n                  className=\"inline-task-edit\"\r\n                  type=\"text\"\r\n                  placeholder=\"Add task\"\r\n                  value={this.state.taskInputValue}\r\n                  onKeyPress={this.handleKeyPress}\r\n                  onChange={evt => this.updateTaskInputValue(evt)}></input>\r\n              ) : (\r\n                <span onClick={this.handleClick}>{this.props.children}</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"task-actions\">\r\n            <div className=\"task-content-project mr-2\">\r\n              {this.props.projects}\r\n            </div>\r\n            <div className=\"  task-content-age\">\r\n              {this.calculateTaskAge(this.props.created)}\r\n            </div>\r\n\r\n            <div className=\"task-action-menu\">\r\n              <Dropdown icon=\"more_horiz\" btnInvisible={true}>\r\n                <DropdownItem triggerAction={this.handleDelete}>\r\n                  Delete\r\n                </DropdownItem>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\r\n\r\nclass ProjectDropdown extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n\r\n    this.state = {\r\n      popupVisible: false,\r\n      items: [],\r\n      suggestions: [],\r\n      projectSelectorValue: 'Select project...'\r\n    };\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   this.setState({ projectSelectorValue: this.props.projects });\r\n  // }\r\n\r\n  handleClick() {\r\n    if (!this.state.popupVisible) {\r\n      // attach/remove event handler\r\n      document.addEventListener('click', this.handleOutsideClick, false);\r\n    } else {\r\n      document.removeEventListener('click', this.handleOutsideClick, false);\r\n    }\r\n\r\n    this.setState(prevState => ({\r\n      popupVisible: !prevState.popupVisible\r\n    }));\r\n  }\r\n\r\n  handleOutsideClick(e) {\r\n    // ignore clicks on the component itself\r\n    if (this.node.contains(e.target)) {\r\n      return;\r\n    }\r\n\r\n    this.handleClick();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('click', this.handleOutsideClick, false);\r\n  }\r\n\r\n  handleProjectSelection = project => {\r\n    this.setState({\r\n      projectSelectorValue: project\r\n    });\r\n    this.props.onProjectSelection(project);\r\n    this.handleClick();\r\n  };\r\n\r\n  onTextChange = e => {\r\n    const value = e.target.value;\r\n    let suggestions = [];\r\n\r\n    this.setState({ hasNewProject: false });\r\n\r\n    if (value.length === 0) {\r\n      suggestions = this.props.items;\r\n      this.setState({ suggestions });\r\n    }\r\n    if (value.length > 0) {\r\n      const regex = new RegExp(`^${value}`, 'i');\r\n      suggestions = this.props.items.sort().filter(v => regex.test(v.name));\r\n    }\r\n\r\n    if (suggestions.length === 0) {\r\n      suggestions.push({ name: value });\r\n      this.setState({ suggestions, hasNewProject: true });\r\n    } else {\r\n      this.setState({ suggestions });\r\n    }\r\n  };\r\n\r\n  renderSuggestions = () => {\r\n    let { suggestions } = this.state;\r\n    let { hasNewProject } = this.state;\r\n    if (suggestions.length === 0) {\r\n      suggestions = this.props.items;\r\n    }\r\n\r\n    return suggestions.map((item, idx) => (\r\n      <div className=\"menu-item-container\" key={idx}>\r\n        <div\r\n          className=\"menu-item\"\r\n          onClick={() => {\r\n            this.handleProjectSelection(suggestions[idx].name);\r\n          }}>\r\n          <div>\r\n            {hasNewProject ? '+ Create a new project with ' : ''}\r\n            <span\r\n              className={\r\n                suggestions.length === 1 ? 'new-project-suggestion' : ''\r\n              }>\r\n              {suggestions[idx].name}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"popover-container mb-2\"\r\n        ref={node => {\r\n          this.node = node;\r\n        }}>\r\n        <div\r\n          className=\"input-project-selector mr-1\"\r\n          onClick={this.handleClick}\r\n          placeholder=\"Select project...\">\r\n          {this.state.projectSelectorValue}\r\n          <i className=\"material-icons md-18\">arrow_drop_down</i>\r\n        </div>\r\n        {this.state.popupVisible && (\r\n          <div className=\"menu-container noselect\">\r\n            <div className=\"menu\">\r\n              <div className=\"menu-input\">\r\n                <input\r\n                  onChange={this.onTextChange}\r\n                  placeholder=\"Find project\"></input>\r\n                <i className=\"material-icons md-18\">search</i>\r\n              </div>\r\n              <div className=\"menu-list\">{this.renderSuggestions()}</div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDropdown;\r\n","import React, { Component } from 'react';\r\nimport ProjectDropdown from './projectdropdown';\r\n\r\nclass NewTaskModule extends Component {\r\n  state = {\r\n    taskInputValue: '',\r\n    projectSelectorValue: ''\r\n  };\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.createTask();\r\n    }\r\n  };\r\n\r\n  updateTaskInputValue(evt) {\r\n    this.setState({\r\n      taskInputValue: evt.target.value\r\n    });\r\n  }\r\n\r\n  handleProjectSelection = project => {\r\n    this.setState({ projectSelectorValue: project });\r\n  };\r\n\r\n  handleCreateTask = () => {\r\n    this.props.onCreateTask(\r\n      this.state.taskInputValue,\r\n      this.state.projectSelectorValue\r\n    );\r\n    this.setState({ taskInputValue: '', projectSelectorValue: '' });\r\n  };\r\n\r\n  handleProjectReorder = projectList => {\r\n    this.props.onReorderProjects(projectList);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <input\r\n          id=\"add-task-input\"\r\n          className=\"mb-2\"\r\n          type=\"text\"\r\n          placeholder=\"Add task\"\r\n          value={this.state.taskInputValue}\r\n          onKeyPress={this.handleKeyPress}\r\n          onChange={evt => this.updateTaskInputValue(evt)}></input>\r\n\r\n        <ProjectDropdown\r\n          items={this.props.items}\r\n          onProjectSelection={this.handleProjectSelection}></ProjectDropdown>\r\n\r\n        <button onClick={this.handleCreateTask} className=\"btn btn-primary\">\r\n          Add\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTaskModule;\r\n","import React, { Component } from 'react';\r\n\r\nclass Modal extends Component {\r\n  handleHideModal = () => {\r\n    this.props.hide();\r\n  };\r\n\r\n  render() {\r\n    const showHideClassName = this.props.show\r\n      ? 'modal display-block'\r\n      : 'modal display-none';\r\n\r\n    return (\r\n      <div className={showHideClassName}>\r\n        <section className=\"modal-main\">\r\n          <h2>{this.props.heading}</h2>\r\n          {this.props.children}\r\n          <button\r\n            className=\"btn btn-icon btn-invisible modal-close mr-2 mt-2\"\r\n            onClick={this.handleHideModal}>\r\n            <i className=\"material-icons\">close</i>\r\n          </button>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useParams\r\n} from 'react-router-dom';\r\nimport './App.css';\r\nimport Task from './components/task';\r\nimport NewTaskModule from './components/newTaskModule';\r\nimport Dropdown from './components/dropdown';\r\nimport DropdownItem from './components/dropdownitem';\r\nimport Modal from './components/modal';\r\n\r\nconst boob = require('./js/controller.js');\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pageTitle: 'All tasks',\r\n      tasks: [],\r\n      projects: [],\r\n      modals: {\r\n        newTask: { visible: false },\r\n        navigation: { visible: false },\r\n        priority: { visible: false }\r\n      },\r\n      offline: true\r\n    };\r\n  }\r\n\r\n  myHeaders = new Headers({\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json'\r\n  });\r\n\r\n  updateLocalStorage = (name, obj) => {\r\n    window.localStorage.setItem(name, JSON.stringify(obj));\r\n  };\r\n\r\n  // ===================================================================\r\n\r\n  // Calculate a score based on the tasks age\r\n  calculateTaskAge = date => {\r\n    // get the age of the task in days\r\n    let age = Math.floor((new Date() - new Date(date)) / (1000 * 60 * 60 * 24));\r\n    let score;\r\n\r\n    if (age > 60) {\r\n      score = 3;\r\n    } else if (age > 10) {\r\n      score = 2;\r\n    } else if (age > 7) {\r\n      score = 1;\r\n    } else {\r\n      score = 0;\r\n    }\r\n\r\n    return score;\r\n  };\r\n\r\n  // Calculate a score based on the priority of the project\r\n  calculateProjectScore = (task, projects) => {\r\n    if (!projects) {\r\n      return 0;\r\n    }\r\n\r\n    let projectCount = projects.length;\r\n    let projectScore;\r\n    let project = task.projects;\r\n\r\n    projects.find((item, idx) => {\r\n      if (item.name === project) {\r\n        return (projectScore = parseInt(idx, 10));\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return projectCount - projectScore + 1;\r\n  };\r\n\r\n  // Calculate the total score for the task\r\n  calculateTaskScore = (task, projects) => {\r\n    let score =\r\n      this.calculateTaskAge(task.created) +\r\n      this.calculateProjectScore(task, projects);\r\n    return score;\r\n  };\r\n\r\n  // Order data\r\n  orderData = (tasks, projects) => {\r\n    let rawData = [];\r\n    Object.keys(tasks).map(id => {\r\n      let task = tasks[id];\r\n      let totalScore = this.calculateTaskScore(task, projects);\r\n      task.score = totalScore;\r\n      let newData = [task, totalScore];\r\n      rawData.push(newData);\r\n    });\r\n\r\n    // Sorts the array by the total score 9-1;\r\n    rawData.sort(function(a, b) {\r\n      return b[1] - a[1];\r\n    });\r\n\r\n    // Remove the total score int from the array\r\n    rawData.map(item => {\r\n      item.pop();\r\n    });\r\n    let newArr = [].concat.apply([], rawData);\r\n    return newArr;\r\n  };\r\n\r\n  fetchData = () => {\r\n    // Get existing players from local storage\r\n    let x = JSON.parse(window.localStorage.getItem('tasks'));\r\n    let y = JSON.parse(window.localStorage.getItem('projects'));\r\n\r\n    x\r\n      ? console.log('Local tasks exists')\r\n      : this.updateLocalStorage('tasks', {});\r\n    y\r\n      ? console.log('Local projects exists')\r\n      : this.updateLocalStorage('projects', []);\r\n\r\n    if (x) {\r\n      this.setState({ rootTasks: x, tasks: this.orderData(x, y), projects: y });\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  // ===================================================================\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n    let nick = new boob('value', 'project', 'id');\r\n    console.log(nick);\r\n    nick.edit();\r\n  }\r\n\r\n  reorderProjects = object => {\r\n    this.updateLocalStorage('projects', object); /* Update local storage */\r\n    this.fetchData(); /* Set the new state and update the UI */\r\n  };\r\n\r\n  // Send the new task to the server and update state.tasks with the new task\r\n  createTask = (task, project) => {\r\n    let tasks = JSON.parse(window.localStorage.getItem('tasks'));\r\n    let projects = this.state.projects;\r\n\r\n    // Check if the project exists\r\n    let taskProject = projects.filter(item => {\r\n      return item.name === project;\r\n    });\r\n\r\n    if (taskProject.length < 1) {\r\n      let timeStamp = Date.now();\r\n      let ids = 'id-' + timeStamp;\r\n      taskProject = { name: project, id: ids };\r\n      projects.push(taskProject);\r\n    }\r\n\r\n    // Create a new time stame for the task\r\n    let timeStamp = Date.now();\r\n    let ids = 'id-' + timeStamp;\r\n    let created = new Date(timeStamp);\r\n\r\n    // Define the new task\r\n    tasks[ids] = {\r\n      id: ids,\r\n      value: task,\r\n      projects: project,\r\n      created: created\r\n    };\r\n\r\n    // Update local storage\r\n    this.updateLocalStorage('tasks', tasks);\r\n    this.updateLocalStorage('projects', projects);\r\n\r\n    // Update the UI\r\n    this.fetchData();\r\n  };\r\n\r\n  // Update task value\r\n  updateTaskValue = (taskIDX, taskValue) => {\r\n    let tasks = JSON.parse(window.localStorage.getItem('tasks'));\r\n    let task = tasks[taskIDX];\r\n    task.value = taskValue;\r\n    this.updateLocalStorage('tasks', tasks);\r\n    this.fetchData();\r\n  };\r\n\r\n  // Update task project\r\n  updateTaskProject = (taskIDX, project) => {\r\n    // let { tasks } = this.state;\r\n    // let { projects } = this.state;\r\n    // let task = tasks[taskIDX];\r\n    // let taskProject = projects.filter(item => {\r\n    //   return item.name === project;\r\n    // });\r\n    // task.projects = project;\r\n    // if (taskProject.length < 1) {\r\n    //   let timeStamp = Date.now();\r\n    //   let ids = 'id-' + timeStamp;\r\n    //   taskProject = { name: project, id: ids };\r\n    //   projects.push(taskProject);\r\n    // }\r\n    // this.setState({ tasks: tasks, projects: projects });\r\n  };\r\n\r\n  // Delete the task from the server\r\n  deleteTask = taskId => {\r\n    let tasks = JSON.parse(window.localStorage.getItem('tasks'));\r\n    delete tasks[taskId];\r\n    this.updateLocalStorage('tasks', tasks);\r\n    this.fetchData();\r\n  };\r\n\r\n  // Delete project\r\n  deleteProject = e => {\r\n    let tasks = JSON.parse(window.localStorage.getItem('tasks'));\r\n    let projects = JSON.parse(window.localStorage.getItem('projects'));\r\n    const projectIDX = e.currentTarget.value;\r\n    const projectIndex = parseInt(projectIDX, 10);\r\n    const project = projects[projectIDX];\r\n    projects = projects.filter((item, idx) => {\r\n      return idx != projectIndex;\r\n    });\r\n    Object.keys(tasks).forEach(task => {\r\n      if (tasks[task].projects === project.name) delete tasks[task];\r\n    });\r\n    this.updateLocalStorage('tasks', tasks);\r\n    this.updateLocalStorage('projects', projects);\r\n    this.fetchData();\r\n  };\r\n\r\n  // Complete task\r\n  completeTask = taskIDX => {\r\n    this.deleteTask(taskIDX);\r\n  };\r\n\r\n  // restore test data\r\n  restoretestData = () => {\r\n    let testData = {\r\n      projects: [\r\n        {\r\n          name: 'Smart',\r\n          id: 'id-1575321509156'\r\n        },\r\n        {\r\n          name: 'Admin',\r\n          id: 'id-1578418157069'\r\n        },\r\n        {\r\n          name: 'OJB',\r\n          id: 'id-1578418157123'\r\n        },\r\n        {\r\n          name: 'Test Project',\r\n          id: 'id-1578418157999'\r\n        }\r\n      ],\r\n      incompleteTasks: {\r\n        'id-1575720265375': {\r\n          value: 'Catch up with Itzi about Smart chat proposal',\r\n          projects: 'OJB',\r\n          created: '2019-11-07T12:04:25.375Z',\r\n          id: 'id-1575720265375'\r\n        },\r\n        'id-1575720282012': {\r\n          value: 'Create calendar prototype',\r\n          projects: 'OJB',\r\n          created: '2019-11-02T12:04:42.012Z',\r\n          id: 'id-1575720282012'\r\n        },\r\n        'id-1575720298251': {\r\n          value: 'Create UT discussion guide',\r\n          projects: 'OJB',\r\n          created: '2019-12-07T12:04:58.251Z',\r\n          id: 'id-1575720298251'\r\n        },\r\n        'id-1575720333155': {\r\n          value: 'Check OJB labels for accessibility',\r\n          projects: 'OJB',\r\n          created: '2019-11-01T12:05:33.155Z',\r\n          id: 'id-1575720333155'\r\n        },\r\n        'id-1575720348555': {\r\n          value: 'Get feedback from Nick RE E7 modal option',\r\n          projects: 'OJB',\r\n          created: '2019-10-07T12:05:48.555Z',\r\n          id: 'id-1575720348555'\r\n        },\r\n        'id-1575720371290': {\r\n          value: 'Phone IT about getting a windows VM',\r\n          projects: 'Admin',\r\n          created: '2019-09-07T12:06:11.290Z',\r\n          id: 'id-1575720371290'\r\n        },\r\n        'id-1575720389795': {\r\n          value: 'Write up mobile modal rules',\r\n          projects: 'Admin',\r\n          created: '2019-08-07T12:06:29.795Z',\r\n          id: 'id-1575720389795'\r\n        },\r\n        'id-1575720400219': {\r\n          value: 'Sketch versioning',\r\n          projects: 'Admin',\r\n          created: '2019-07-07T12:06:40.219Z',\r\n          id: 'id-1575720400219'\r\n        },\r\n        'id-1575720415644': {\r\n          value: 'Yellow circle - Does it apply to UX?',\r\n          projects: 'Admin',\r\n          created: '2019-06-07T12:06:55.644Z',\r\n          id: 'id-1575720415644'\r\n        },\r\n        'id-1575720447203': {\r\n          value: 'Add back button to calendar designs',\r\n          projects: 'OJB',\r\n          created: '2019-05-07T12:07:27.203Z',\r\n          id: 'id-1575720447203'\r\n        },\r\n        'id-1575720465282': {\r\n          value: 'Create meeting for Jan about Q1 OKRs',\r\n          projects: 'Smart',\r\n          created: '2019-04-07T12:07:45.282Z',\r\n          id: 'id-1575720465282'\r\n        }\r\n      },\r\n      completedTasks: {\r\n        'id-1575720465888': {\r\n          value: 'This is a completed task',\r\n          projects: 'Smart',\r\n          created: '2019-04-07T12:07:45.282Z',\r\n          id: 'id-1575720465888'\r\n        }\r\n      }\r\n    };\r\n\r\n    let tasks = testData.incompleteTasks;\r\n    let projects = testData.projects;\r\n\r\n    this.updateLocalStorage('tasks', tasks);\r\n    this.updateLocalStorage('projects', projects);\r\n\r\n    this.fetchData();\r\n  };\r\n\r\n  // Re-order project priority\r\n  onDragStart = (e, index) => {\r\n    console.log('Start');\r\n    this.draggedItem = this.state.projects[index];\r\n    e.dataTransfer.effectAllowed = 'move';\r\n    e.dataTransfer.setData('text/html', e.target.parentNode);\r\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\r\n  };\r\n\r\n  onDragOver = index => {\r\n    console.log(index);\r\n    const draggedOverItem = this.state.projects[index];\r\n    // if the item is dragged over itself, ignore\r\n    if (this.draggedItem === draggedOverItem) {\r\n      return;\r\n    }\r\n    // filter out the currently dragged item\r\n    let items = this.state.projects.filter(item => item !== this.draggedItem);\r\n    // add the dragged item after the dragged over item\r\n    items.splice(index, 0, this.draggedItem);\r\n    this.setState({ projects: items });\r\n  };\r\n\r\n  onDragEnd = () => {\r\n    console.log('End');\r\n    this.draggedIdx = null;\r\n    this.reorderProjects(this.state.projects);\r\n  };\r\n\r\n  // Control modal visibility\r\n  showModal = e => {\r\n    let { modals } = this.state;\r\n    let modal = e.target.dataset.modal;\r\n    modals[modal].visible = true;\r\n    this.setState({ modals });\r\n  };\r\n\r\n  hideModal = () => {\r\n    let { modals } = this.state;\r\n    Object.keys(modals).map(modal => (modals[modal].visible = false));\r\n    this.setState({ modals });\r\n  };\r\n\r\n  // ==================================================\r\n\r\n  render() {\r\n    const Header = () => {};\r\n    const renderTask = task => {\r\n      return (\r\n        <Task\r\n          key={task.id}\r\n          id={task.id}\r\n          projects={task.projects}\r\n          allProjects={this.state.projects}\r\n          created={task.created}\r\n          onDelete={this.deleteTask}\r\n          onUpdateTask={this.updateTaskValue}\r\n          onUpdateProject={this.updateTaskProject}\r\n          onCompleteTask={this.completeTask}>\r\n          {task.value}\r\n        </Task>\r\n      );\r\n    };\r\n\r\n    const Inbox = () => {\r\n      let tasks = [...this.state.tasks];\r\n      let mit;\r\n\r\n      if (tasks.length < 1) {\r\n        return <p>Looks like you're done for the day</p>;\r\n      } else if (tasks.length === 1) {\r\n        return (\r\n          <div className=\"mit-task-container\">\r\n            <h2>This is you MIT</h2>\r\n            <ul className=\"task-list\">{renderTask(tasks[0])}</ul>\r\n          </div>\r\n        );\r\n      } else {\r\n        mit = tasks[0];\r\n        tasks.shift();\r\n        return (\r\n          <React.Fragment>\r\n            <div className=\"mit-task-container\">\r\n              <h2>This is you MIT</h2>\r\n              <ul className=\"task-list\">{renderTask(mit)}</ul>\r\n            </div>\r\n\r\n            <div className=\"task-list-container\">\r\n              <h2>Everything else</h2>\r\n              <ul className=\"task-list\">\r\n                {tasks.map(task => renderTask(task))}\r\n              </ul>\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    };\r\n\r\n    const renderProjectView = project => {\r\n      const tasks = [...this.state.tasks];\r\n      const filteredTasks = tasks.filter(task => {\r\n        return task.projects === project;\r\n      });\r\n      return filteredTasks.length < 1 ? (\r\n        <p>This project has no tasks</p>\r\n      ) : (\r\n        <React.Fragment>\r\n          <div className=\"task-list-container\">\r\n            <ul className=\"task-list\">\r\n              {filteredTasks.map(task => renderTask(task))}\r\n            </ul>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div className={this.state.show ? 'app no-scroll' : 'app'}>\r\n        <Router>\r\n          <div className=\"header mb-6\">\r\n            <div className=\"col-1\">\r\n              <h1 data-modal={'navigation'} onClick={this.showModal}>\r\n                {this.state.pageTitle}\r\n              </h1>\r\n            </div>\r\n            <div className=\"col-2\">\r\n              <button\r\n                className=\"btn btn-primary mr-2\"\r\n                data-modal={'newTask'}\r\n                onClick={this.showModal}>\r\n                New task\r\n              </button>\r\n              <Dropdown icon=\"more_horiz\" btnInvisible={false}>\r\n                <DropdownItem triggerAction={this.restoretestData}>\r\n                  Restore test data\r\n                </DropdownItem>\r\n              </Dropdown>\r\n            </div>\r\n            <Modal\r\n              show={this.state.modals.navigation.visible}\r\n              hide={this.hideModal}\r\n              heading={'Switch projects'}>\r\n              <ul>\r\n                <li>\r\n                  <Link to={'/'} onClick={this.hideModal}>\r\n                    All tasks\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link to={'completed'} onClick={this.hideModal}>\r\n                    Completed\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n              <hr></hr>\r\n              <div className=\"menu-list\">\r\n                {this.state.projects\r\n                  ? this.state.projects.map((project, idx) => (\r\n                      <div\r\n                        className=\"menu-item-container\"\r\n                        key={idx}\r\n                        onDragOver={() => this.onDragOver(idx)}>\r\n                        <div\r\n                          className=\"menu-item\"\r\n                          draggable=\"true\"\r\n                          onDragStart={e => this.onDragStart(e, idx)}\r\n                          onDragEnd={this.onDragEnd}>\r\n                          <div className=\"icon-left\">\r\n                            <i className=\"material-icons md-18\">\r\n                              drag_indicator\r\n                            </i>\r\n                          </div>\r\n                          <div>\r\n                            <Link\r\n                              to={`/${project.name}`}\r\n                              onClick={this.hideModal}>\r\n                              {project.name}\r\n                            </Link>\r\n                          </div>\r\n                          <div className=\"icon-right\">\r\n                            <button value={idx} onClick={this.deleteProject}>\r\n                              <i className=\"material-icons md-18\">delete</i>\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))\r\n                  : 'Add a task to create your first project.'}\r\n              </div>\r\n            </Modal>\r\n            <Modal\r\n              show={this.state.modals.newTask.visible}\r\n              hide={this.hideModal}\r\n              heading={'New task'}>\r\n              <NewTaskModule\r\n                items={this.state.projects}\r\n                onCreateTask={this.createTask}\r\n                onReorderProjects={this.reorderProjects}></NewTaskModule>\r\n            </Modal>\r\n          </div>\r\n\r\n          <div className=\"main\">\r\n            <Switch>\r\n              {this.state.projects.length < 1\r\n                ? ''\r\n                : this.state.projects.map((project, idx) => (\r\n                    <Route\r\n                      key={idx}\r\n                      path={`/${project.name}`}\r\n                      heading={project.name}>\r\n                      {renderProjectView(project.name)}\r\n                    </Route>\r\n                  ))}\r\n\r\n              <Route path=\"/completed\">\r\n                <h1>Hello</h1>\r\n              </Route>\r\n\r\n              <Route path=\"/\">\r\n                <Inbox></Inbox>\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}